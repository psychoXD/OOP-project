/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seproject;

import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author reticent
 */
public class AdminModifyCourse extends javax.swing.JFrame {

    //Private Declared Memeber Variables
    Database db;    //Database db
    Object [] o;    //Holds course Information
    
    /**
     * Creates new form AdminModifyCourse
     */
    public AdminModifyCourse() {
        initComponents();
    }
    
    /**
     * AdminModifyCourse (Database db, Object [] o) Constructor
     * -------------------------------------------------------------------
     * Constructor that takes in Database information and Object [] o array
     * that contains information the selected row that is desired to be modified.
     * @param db
     * @param o 
     */
    public AdminModifyCourse(Database db, Object[]o) {
        this.db = db;
        this.o = o;
        initComponents();
        
        txtSectionNo.setText(Integer.toString((int)o[0]));
        txtCourseID.setText((String)o[1]);
        txtRoomNo.setText((String)o[2]);
        txtClassStartTime.setText(((Time)o[3]).toString());
        txtClassEndTime.setText(((Time)o[4]).toString());
        txtClassDays.setText((String)o[5]);
        txtStaffID.setText(Integer.toString((int)o[6]));
        
        fillStudentNotInClass();
        fillStudentInClass();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSectionNo = new javax.swing.JLabel();
        txtSectionNo = new javax.swing.JTextField();
        lblCourseID = new javax.swing.JLabel();
        txtCourseID = new javax.swing.JTextField();
        lblClassBeginTime = new javax.swing.JLabel();
        txtClassStartTime = new javax.swing.JTextField();
        lblRoomNo = new javax.swing.JLabel();
        txtRoomNo = new javax.swing.JTextField();
        lblCourseID1 = new javax.swing.JLabel();
        lblRoomNo1 = new javax.swing.JLabel();
        lblClassBeginTime1 = new javax.swing.JLabel();
        txtStaffID = new javax.swing.JTextField();
        txtClassDays = new javax.swing.JTextField();
        txtClassEndTime = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstStudentNotInClass = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnAddStudent = new javax.swing.JButton();
        btnRemoveStudent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstStudentInClass = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Courses");
        setResizable(false);

        lblSectionNo.setText("Section No:");

        txtSectionNo.setEditable(false);

        lblCourseID.setText("Course ID:");

        lblClassBeginTime.setText("Class Start Time:");

        lblRoomNo.setText("Room No:");

        lblCourseID1.setText("Class End Time:");

        lblRoomNo1.setText("Class Days:");

        lblClassBeginTime1.setText("Staff ID:");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lstStudentNotInClass.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstStudentNotInClass);

        jLabel1.setText("Students Not In Course");

        btnAddStudent.setText("Add Student");
        btnAddStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStudentActionPerformed(evt);
            }
        });

        btnRemoveStudent.setText("Remove Student");
        btnRemoveStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveStudentActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lstStudentInClass);

        jLabel2.setText("Student In Course");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSectionNo)
                    .addComponent(lblCourseID)
                    .addComponent(lblClassBeginTime)
                    .addComponent(lblRoomNo)
                    .addComponent(lblCourseID1)
                    .addComponent(lblRoomNo1)
                    .addComponent(lblClassBeginTime1))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSectionNo)
                    .addComponent(txtCourseID)
                    .addComponent(txtClassStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(txtRoomNo)
                    .addComponent(txtStaffID, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(txtClassDays)
                    .addComponent(txtClassEndTime)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemoveStudent, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(btnAddStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSectionNo)
                            .addComponent(txtSectionNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCourseID)
                                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblRoomNo)
                                    .addComponent(txtRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblClassBeginTime)
                                    .addComponent(txtClassStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCourseID1)
                                    .addComponent(txtClassEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblRoomNo1)
                                    .addComponent(txtClassDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblClassBeginTime1)
                                    .addComponent(txtStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSubmit)
                            .addComponent(btnReset))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btnAddStudent)
                        .addGap(38, 38, 38)
                        .addComponent(btnRemoveStudent)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * btnReset Action Performed
     * ----------------------------------
     * Reset JTxtFields to default setting.
     * @param evt 
     */
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtSectionNo.setText(Integer.toString((int)o[0]));
        txtCourseID.setText((String)o[1]);
        txtRoomNo.setText((String)o[2]);
        txtClassStartTime.setText(((Time)o[3]).toString());
        txtClassEndTime.setText(((Time)o[4]).toString());
        txtClassDays.setText((String)o[5]);
        txtStaffID.setText(Integer.toString((int)o[6]));
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * btnSubmit Action Performed
     * ----------------------------------------
     * Submits information through Object [] arr that calls upon Database function
     * updateCourseInfo(Object []) and sends that array in the following order.
     * o[0] = SectionNo
     * o[1] = CourseID
     * o[2] = RoomNo
     * o[3] = ClassStartTime
     * o[4] = ClassEndTime
     * o[5] = ClassDays
     * o[6] = StaffID
     * @param evt 
     */
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        //Instance Member Variables
        try
        {
            DateFormat formatter = new SimpleDateFormat("HH:mm");
            Object temp [];    //Holds changed info 
            int i = 0;  //Keeps track of any change
            int sectionNo = (int)o[0];  //Section Number
            String CourseID = txtCourseID.getText(); //Course ID
            String RoomNo = txtRoomNo.getText();   //Room Number
            Time classStartTime 
                    = new Time(formatter.
                            parse(txtClassStartTime.getText()).getTime()); //Class Start Time
            Time classEndTime 
                    = new Time(formatter.
                            parse(txtClassEndTime.getText()).getTime()); //Class End Time


            String classDays = txtClassDays.getText();    //Days Class in on
            int staffID = Integer.parseInt(txtStaffID.getText()) ;    //StaffID of Staff teaching class            
            
            if ( !(CourseID.equals((String)o[1])) )
            {
                i++;
            }
            
            if ( ! (RoomNo.equals((String)o[2])) )
            {
                i++;
            }
            
            if ( !(classStartTime.compareTo((Time)o[3])==0) )
            {
                i++;
            }
            
            if ( !(classEndTime.compareTo((Time)o[4])==0) )
            {
                i++;
            }
            
            if (!(classDays.equals((String)o[5])) )
            {
                i++;
            }
            
            if (!(staffID != (int)o[6]) )
            {
                i++;
            }
                
            
            if (i != 0) //If there are any changes
            {
                temp = new Object[7];
                temp[0] = sectionNo;
                temp[1] = CourseID;
                temp[2] = RoomNo;
                temp[3] = classStartTime;
                temp[4] = classEndTime;
                temp[5] = classDays;
                temp[6] = staffID;

                if(db.updateCourseInfo(temp)) //Update Student User Was Successful
                {
                    JOptionPane.showMessageDialog(null, "Update was successful.","Update Success",
                                        JOptionPane.DEFAULT_OPTION);
                    this.dispose();
                }
                else    //Update Student User Was Unsuccessful
                {
                    JOptionPane.showMessageDialog(null, "Update was unsuccessful.","Update Failed",
                                        JOptionPane.ERROR_MESSAGE);
                    this.dispose();
                }
            }
        }
        catch (Exception e)
        {
            
        }
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    /**
     * 
     * @param evt 
     */
    private void btnAddStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStudentActionPerformed
        
        if (!lstStudentNotInClass.isSelectionEmpty())   //If there is a selection
        {
            int studentID = Integer.parseInt(String.valueOf(lstStudentNotInClass.getSelectedValue()));    //Student ID
            int sectionNo = Integer.parseInt(txtSectionNo.getText());   //Section No.

            
            if (db.addStudentToCourse(sectionNo, studentID))    //Success
            {
                JOptionPane.showMessageDialog(null, "Update was successful.","Student added to course",
                                        JOptionPane.ERROR_MESSAGE);
                fillStudentNotInClass();
                fillStudentInClass();
            }
            else    //Unsuccessful
            {
                JOptionPane.showMessageDialog(null, "Update was unsuccessful.","Could not add student to class.",
                                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddStudentActionPerformed

    private void btnRemoveStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveStudentActionPerformed

        if (!lstStudentInClass.isSelectionEmpty())   //If there is a selection
        {
            int studentID = Integer.parseInt(String.valueOf(lstStudentInClass.getSelectedValue()));    //Student ID
            int sectionNo = Integer.parseInt(txtSectionNo.getText());   //Section No.

            if (db.removeStudentToCourse(sectionNo, studentID))    //Success
            {
                JOptionPane.showMessageDialog(null, "Update was successful.","Student removed from course",
                    JOptionPane.ERROR_MESSAGE);
                fillStudentNotInClass();
                fillStudentInClass();
            }
            else    //Unsuccessful
            {
                JOptionPane.showMessageDialog(null, "Update was unsuccessful.","Could not remove student from class.",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRemoveStudentActionPerformed

    
    /**
     * 
     */
    private void fillStudentNotInClass()
    {
        try
        {
            //Instanced Variables
            ArrayList<Integer> o = db.getStudentIDNotInCourse(Integer.parseInt(txtSectionNo.getText()));   //Stores each User from DB
            DefaultListModel model = new DefaultListModel();
            
            for (int x = 0; x < o.size(); x++)
            {
                model.addElement(o.get(x));
            }
            
            lstStudentNotInClass.setModel(model);
        }
        catch(Exception e)
        {
            
        }
    }
    
    /**
     * 
     */
    private void fillStudentInClass()
    {
        try
        {
            //Instanced Variables
            ArrayList<Integer> o = db.getStudentIDInCourse(Integer.parseInt(txtSectionNo.getText()));   //Stores each User from DB
            DefaultListModel model = new DefaultListModel();
            
            for (int x = 0; x < o.size(); x++)
            {
                model.addElement(o.get(x));
            }
            
            lstStudentInClass.setModel(model);
        }
        catch(Exception e)
        {
            
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminModifyCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminModifyCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminModifyCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminModifyCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminModifyCourse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnRemoveStudent;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClassBeginTime;
    private javax.swing.JLabel lblClassBeginTime1;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblCourseID1;
    private javax.swing.JLabel lblRoomNo;
    private javax.swing.JLabel lblRoomNo1;
    private javax.swing.JLabel lblSectionNo;
    private javax.swing.JList<String> lstStudentInClass;
    private javax.swing.JList<String> lstStudentNotInClass;
    private javax.swing.JTextField txtClassDays;
    private javax.swing.JTextField txtClassEndTime;
    private javax.swing.JTextField txtClassStartTime;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtRoomNo;
    private javax.swing.JTextField txtSectionNo;
    private javax.swing.JTextField txtStaffID;
    // End of variables declaration//GEN-END:variables
}
